const path = require('path');
const webpack = require('webpack');
const pkg = require('./package.json');
const HtmlPlugin = require('html-webpack-plugin');
const CopyPlugin = require('copy-webpack-plugin');
const TerserPlugin = require('terser-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;
const ForkTsCheckerWebpackPlugin = require('fork-ts-checker-webpack-plugin');
const TsconfigPathsPlugin = require('tsconfig-paths-webpack-plugin');
const Dotenv = require('dotenv-webpack');
const CircularDependencyPlugin = require('circular-dependency-plugin');

module.exports = (env, argv) => {
  const mode = (argv && argv.mode) || 'development';
  const isProd = mode === 'production';
  const plugins = [
    // Set environment variables
    ...(process.env.brand
      ? [
          new webpack.DefinePlugin({
            'process.env.brand': JSON.stringify(process.env.brand)
          })
        ]
      : []),
    // DotEnv for overwriting env vars
    new Dotenv({
      path: process.env.DOTENV_CONFIG_PATH
    }),

    // TS type checking on separate thread to increase build and incremental build speed
    new ForkTsCheckerWebpackPlugin(),

    // Circular dependency checker
    new CircularDependencyPlugin({
      exclude: /dist|node_modules/,
      failOnError: false, // TODO switch to true once circles are fixed
      // `onDetected` is called for each module that is cyclical
      onDetected(/* { module: webpackModuleRecord, paths, compilation } */) {
        // TODO uncomment
        // `paths` will be an Array of the relative module paths that make up the cycle
        // `module` will be the module record generated by webpack that caused the cycle
        // compilation.errors.push(new Error(paths.join(' -> ')));
      }
    }),

    // CSS output
    new MiniCssExtractPlugin({
      filename: isProd ? 'assets/[name].[hash].css' : 'assets/[name].css',
      chunkFilename: isProd ? '[id].[hash].css' : '[id].css'
    }),

    // Copy core assets to root of build dir
    new CopyPlugin({
      patterns: [
        {
          from: `./src/assets/config.js`,
          to: `./config.js`
        },
        {
          from: `./src/assets/robots.txt`,
          to: `./robots.txt`
        },
      ]
    }),

    // Html output
    new HtmlPlugin({
      template: `./src/assets/index.html`,
      hash: true,
      excludeChunks: ['vault-web-worker']
    })
  ];

  // Generate meta.json
  if (isProd) {
    const meta = new CopyPlugin({
      patterns: [
        {
          from: `./dist/meta.json`,
          to: `./meta.json`
        }
      ]
    });
    plugins.push(meta);
  }

  // Bundle analyzer
  if (env && env.analyzer === 'enabled') {
    const analyzer = new BundleAnalyzerPlugin({});
    plugins.push(analyzer);
  }

  return {
    entry: {
      index: `./src/index.tsx`,
     // 'vault-web-worker': './src/services/vault/vault-web-worker.ts'
    },

    output: {
      publicPath: '/',
      filename: 'assets/[name].js',
      path: path.resolve(__dirname, `dist/build`),
      globalObject: 'this'
    },

    devtool: isProd ? false : 'eval-cheap-module-source-map',

    resolve: {
      modules: ['node_modules', 'src'],
      extensions: ['.ts', '.tsx', '.js', '.jsx'],
      plugins: [new TsconfigPathsPlugin()]
    },

    module: {
      rules: [
        {
          test: /\.tsx?$/,
          loader: 'ts-loader',
          options: {
            transpileOnly: true,
            experimentalWatchApi: true
          },
          exclude: /dist/
        },
        {
          // Jsx -> js
          test: /\.js$/,
          exclude: /(node_modules)/,
          include: path.resolve(__dirname, 'src'),
          use: [
            {
              loader: 'babel-loader',
              options: {
                cacheDirectory: true,
                presets: pkg.babel.presets,
                plugins: pkg.babel.plugins
              }
            }
          ]
        },
        {
          test: /\.s[ac]ss$/i,
          use: [
            MiniCssExtractPlugin.loader,
            'css-loader',
            {
              loader: 'sass-loader',
              options: {
                sourceMap: !isProd
              }
            }
          ]
        },
        {
          test: /\.(png|jpg|gif|svg|eot|woff2|ttf|woff|otf|pdf)$/,
          use: [
            {
              loader: 'file-loader',
              options: {
                name: 'assets/[name].[ext]'
              }
            },
            {
              loader: 'image-webpack-loader',
              options: {
                disable: !isProd
              }
            }
          ]
        }
      ]
    },

    optimization: {
      // Only minify if prod
      minimize: isProd,
      minimizer: [
        new TerserPlugin({
          /*
          Reference: https://github.com/webpack-contrib/terser-webpack-plugin#options
          Defaults: { parallel: true, sourceMap: false }
          */
          extractComments: {
            condition: /^\**!|@preserve|@license|@cc_on/i,
            filename: ({ filename }) => {
              return `${filename}.LICENSE`;
            },
            banner: (licenseFile) => {
              const path = JSON.stringify(licenseFile);
              return `License information can be found in ${path}`;
            }
          },
          terserOptions: {
            // Reference: https://github.com/terser/terser#minify-options
            mangle: false
          }
        })
      ]
    },

    // Webpack output...
    stats: {
      assets: true,
      children: false,
      chunks: false,
      colors: true,
      errors: true,
      errorDetails: false,
      hash: true,
      modules: false,
      performance: false,
      version: false
    },

    // Webpack Dev Server properties
    devServer: {
      client: {
        logging: 'info'
      },
      port: 3004,
      historyApiFallback: {
        disableDotRule: true
      },
      hot: true,
      proxy: {},
      devMiddleware: {
        stats: {
          assets: true,
          children: false,
          chunks: false,
          colors: true,
          errors: true,
          errorDetails: false,
          hash: true,
          modules: false,
          performance: false,
          version: false
        }
      }
    },

    // Note: mode sets process.env.NODE_ENV
    mode,
    plugins
  };
};
